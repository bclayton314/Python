# Author: Clayton Baker
# Date: 7FEB2021
# Description: This is a function that will search through a list of numbers
# recursively in order to find and return the maximum value in the list.


def list_max(lst):
    """This function will search through a list recursively to find the maximum value"""
    if len(lst)==1:
        return lst[0]
    else:
        m = list_max(lst[1:])
        if m > lst[0]:
            return m
        else:
            return lst[0]
            
            
# Author: Clayton Baker
# Date: 7FEB2021
# Description: This is a function that will search through a list recursively
# and return true or false based on if the list is in decreasing order or not.


def is_decreasing(lst):
    """Function that will return true or false based on if the list is in decreasing order"""
    if len(lst) == 2:
        if lst[0] <= lst[1]:
            return False
        else:
            return True
    else:
        if lst[0] <= lst[1]:
            return False
        else:
            return is_decreasing(lst[1:])
            
            
# Author: Clayton Baker
# Date: 5FEB2021
# Description:This is a small program that can check whether a string is
# a subsequence of another string.  The program will compare the two strings
# recursively and then display True or False.


def is_subsequence(str1, str2):
    """Function to check whether a string is a subsequence of another using recursion"""
    if str1 == str2 or str1 == "":
        return True

    if len(str1) > len(str2):
        return False

    if str1[0] == str2[0]:
        return is_subsequence(str1[1:], str2[1:])
    else:
        return is_subsequence(str1, str2[1:])


# print(is_subsequence("", ""))
# print(is_subsequence("abcd", "abcde"))
# print(is_subsequence("abc", "xabc"))
# print(is_subsequence("xabc", "xyzabc"))
#
# print(is_subsequence("abc", "xyz"))
# print(is_subsequence("abc", "abzc"))



# Author: Clayton Baker
# Date: 5FEB2021
# Description: This program will search through a list recursively
# with a token. Based on the value in each position, the token will
# move either left or right and if the token can move to the last index
# of the list then True will be displayed or if it can't then False will
# be displayed.


def row_puzzle(lst, index=0, index_set=set()):
    """Function that traverses a list based on the value at the index"""
    if index == len(lst) - 1:
        return True

    if index in index_set:
        return False

    index_set.add(index)

    next_index = index - lst[index]
    if next_index >= 0 and row_puzzle(lst, next_index, index_set):
        return True

    else:
        next_index = index + lst[index]
        return next_index < len(lst) and row_puzzle(lst, next_index, index_set)


# print(row_puzzle([2, 4, 5, 3, 1, 3, 1, 4, 0]))  # True
# print(row_puzzle([1, 3, 2, 1, 3, 4, 0]))  # False
