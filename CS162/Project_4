# Author: Clayton Baker
# Date: 18JAN2021
# Description: A modified version of the binary search function that raises a
# TargetNotFound exception instead of returning -1 when finding an error

def bin_except(a_list, target):
    """
    Searches a_list for an occurrence of target
    If found, returns the index of its position in the list
    If not found, raises TargetNotFound Exception, indicating the target value isn't in the list
    """
    first = 0
    last = len(a_list) - 1
    while first <= last:
        middle = (first + last) // 2
        if a_list[middle] == target:
            return middle
        if a_list[middle] > target:
            last = middle - 1
        else:
            first = middle + 1
    raise TargetNotFound


class TargetNotFound(Exception):
    """Will execute if value isn't found in the search"""
    pass


# def main():
#     try:
#         list1 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]
#         binary_search(list1, 11)
#     except TargetNotFound:
#         print("No target value found in list")


# if __name__ == '__main__':
#     main()

# Author: Clayton Baker
# Date: 21JAN2021
# Description: A small program that creates a Box object with 3 attributes:
# length, width, and height.  The box class can also calculate the volume
# of the box and an outside function can sort the volumes of a list of boxes
# from greatest volume to least volume.


class Box:
    """creates a box object with three attributes: length, width, and height"""
    def __init__(self, length, width, height):
        self._length = length
        self._width = width
        self._height = height

    def get_length(self):
        """Returns the length of the box object"""
        return self._length

    def get_width(self):
        """Returns the width of the box object"""
        return self._width

    def get_height(self):
        """Returns the height of the box object"""
        return self._height

    def volume(self):
        """Returns the volume of the box object"""
        return self._length * self._width * self._height


def box_sort(box_list):
    """Returns a sorted list of volumes for a list of boxes"""
    for index in range(1, len(box_list)):
        value = box_list[index]
        pos = index - 1
        while pos >= 0 and box_list[pos].volume() <= value.volume():
            box_list[pos + 1] = box_list[pos]
            pos -= 1
        box_list[pos + 1] = value


# b1 = Box(3.4, 19.8, 2.1)
# b2 = Box(1.0, 1.0, 1.0)
# b3 = Box(8.2, 8.2, 4.5)
# box_list1 = [b1, b2, b3]
# print([box.volume() for box in box_list1])
# box_sort(box_list1)
# print([box.volume() for box in box_list1])



# Author: Clayton Baker
# Date: 24JAN2021
# Description: This program uses a modified insertion sort to sort a list
# of strings alphabetically regardless of case.


def string_sort(a_list):
    """Sorts a list of strings using insertion sort"""
    for index in range(1, len(a_list)):
        value = a_list[index]
        pos = index - 1
        while pos >= 0 and a_list[pos].lower() > value.lower():
            a_list[pos + 1] = a_list[pos]
            pos -= 1
        a_list[pos + 1] = value


# test_list = ["Zebra","apple", "maRker", "marble"]
# print(test_list)
# string_sort(test_list)
# print(test_list)



# Author: Clayton Baker
# Date: 24JAN2021
# Description: This program has two different functions: bubble_count
# and insertion_count.  Bubble_count counts the comparisons and exchanges
# while doing a bubble sort on a list.  Insertion_count does the same but
# with insertion sort.


def bubble_count(a_list):
    """Returns the number of comparisons and exchanges for a bubble sort of a list"""
    comparisons = 0
    exchanges = 0
    n = len(a_list)
    for i in range(n-1):
        for j in range(0, n-i-1):
            comparisons += 1
            if a_list[j] > a_list[j+1]:
                exchanges += 1
                a_list[j], a_list[j+1] = a_list[j+1], a_list[j]
    return comparisons, exchanges


def insertion_count(a_list):
    """Returns the number of comparisons and exchanges for an insertion sort of a list"""
    comparisons = 0
    exchanges = 0
    for index in range(1, len(a_list)):
        value = a_list[index]
        pos = index - 1
        while pos >= 0 and a_list[pos] > value:
            a_list[pos + 1] = a_list[pos]
            pos -= 1
            comparisons += 1
            exchanges += 1
        a_list[pos + 1] = value
    return comparisons, exchanges


# test_lst2 = [2, 4, 6, 3, 5]
# print(bubble_count(test_lst2))
# print(test_lst2)
#
# test_lst = [2, 4, 6, 3]
#
# print(insertion_count(test_lst))
# print(test_lst)
